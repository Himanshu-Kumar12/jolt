<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:zeebe="http://camunda.org/schema/zeebe/1.0" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:modeler="http://camunda.org/schema/modeler/1.0" id="Definitions_0uz429f" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="5.26.0" modeler:executionPlatform="Camunda Cloud" modeler:executionPlatformVersion="8.5.0">
  <bpmn:process id="Process_1qxmu5q" name="Jolt Spec" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>Flow_097m35c</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="Flow_097m35c" sourceRef="StartEvent_1" targetRef="Activity_144ynht" />
    <bpmn:endEvent id="Event_0j7rm3n">
      <bpmn:incoming>Flow_0utp6dv</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_0utp6dv" sourceRef="Activity_144ynht" targetRef="Event_0j7rm3n" />
    <bpmn:serviceTask id="Activity_144ynht" name="Jolt">
      <bpmn:extensionElements>
        <zeebe:taskDefinition type="jolt-transform" />
        <zeebe:ioMapping>
          <zeebe:input source="={&#10;  &#34;eventId&#34;: &#34;508d1e2f-c47c-48da-b698-1d0ee2f9e3fb&#34;,&#10;  &#34;eventType&#34;: &#34;ServiceTestStateChangeNotification&#34;,&#10;  &#34;eventTime&#34;: &#34;2021-09-08T06:12:05Z&#34;,&#10;  &#34;eventNote&#34;: {&#10;    &#34;code&#34;: &#34;1&#34;,&#10;    &#34;reason&#34;: &#34;Success&#34;&#10;  },&#10;  &#34;event&#34;: {&#10;    &#34;id&#34;: &#34;WRI600000000611&#34;,&#10;    &#34;objectType&#34;: &#34;ServiceTestEvent&#34;,&#10;    &#34;externalId&#34;: &#34;OptusB2_OW_OWSNOW_3b7999d087eb4210fdcfa8e50cbb352f&#34;,&#10;    &#34;status&#34;: &#34;Completed&#34;,&#10;    &#34;notificationType&#34;: &#34;TestCompleted&#34;,&#10;    &#34;serviceTest&#34;: {&#10;      &#34;serviceRef&#34;: {&#10;        &#34;id&#34;: &#34;OVC000000000001&#34;,&#10;        &#34;type&#34;: &#34;OVC&#34;&#10;      },&#10;      &#34;testSpecificationRef&#34;: {&#10;        &#34;id&#34;: &#34;TST000000001016&#34;,&#10;        &#34;version&#34;: &#34;1.0&#34;&#10;      },&#10;      &#34;executionDate&#34;: {&#10;        &#34;startDateTime&#34;: &#34;2024-07-18T04:17:21Z&#34;,&#10;        &#34;endDateTime&#34;: &#34;2024-07-18T04:20:21Z&#34;&#10;      },&#10;      &#34;serviceTestResults&#34;: [&#10;        {&#10;          &#34;type&#34;: &#34;Loopback Test&#34;,&#10;          &#34;status&#34;: &#34;Completed&#34;,&#10;          &#34;result&#34;: &#34;Passed&#34;,&#10;          &#34;testMeasure&#34;: [&#10;            {&#10;              &#34;highCosProfile&#34;: {&#10;                &#34;result&#34;: &#34;Failed&#34;,&#10;                &#34;profile&#34;: &#34;HIGH&#34;,&#10;                &#34;measurements&#34;: [&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Sent&#34;,&#10;                    &#34;value&#34;: &#34;1000&#34;,&#10;                    &#34;unit&#34;: &#34;Packet&#34;&#10;                  },&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Recieved&#34;,&#10;                    &#34;value&#34;: &#34;900&#34;,&#10;                    &#34;unit&#34;: &#34;Packet&#34;&#10;                  },&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Lost&#34;,&#10;                    &#34;value&#34;: &#34;100&#34;,&#10;                    &#34;unit&#34;: &#34;Packet&#34;&#10;                  },&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Lost Percentage&#34;,&#10;                    &#34;value&#34;: &#34;10&#34;,&#10;                    &#34;unit&#34;: &#34;%&#34;&#10;                  }&#10;                ]&#10;              },&#10;              &#34;mediumCosProfile&#34;: {&#10;                &#34;result&#34;: &#34;Failed&#34;,&#10;                &#34;profile&#34;: &#34;HIGH&#34;,&#10;                &#34;measurements&#34;: [&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Sent&#34;,&#10;                    &#34;value&#34;: &#34;1000&#34;,&#10;                    &#34;unit&#34;: &#34;Packet&#34;&#10;                  },&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Recieved&#34;,&#10;                    &#34;value&#34;: &#34;900&#34;,&#10;                    &#34;unit&#34;: &#34;Packet&#34;&#10;                  },&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Lost&#34;,&#10;                    &#34;value&#34;: &#34;100&#34;,&#10;                    &#34;unit&#34;: &#34;Packet&#34;&#10;                  },&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Lost Percentage&#34;,&#10;                    &#34;value&#34;: &#34;10&#34;,&#10;                    &#34;unit&#34;: &#34;%&#34;&#10;                  }&#10;                ]&#10;              },&#10;              &#34;lowCosProfile&#34;: {&#10;                &#34;result&#34;: &#34;Failed&#34;,&#10;                &#34;profile&#34;: &#34;HIGH&#34;,&#10;                &#34;measurements&#34;: [&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Sent&#34;,&#10;                    &#34;value&#34;: &#34;1000&#34;,&#10;                    &#34;unit&#34;: &#34;Packet&#34;&#10;                  },&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Recieved&#34;,&#10;                    &#34;value&#34;: &#34;900&#34;,&#10;                    &#34;unit&#34;: &#34;Packet&#34;&#10;                  },&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Lost&#34;,&#10;                    &#34;value&#34;: &#34;100&#34;,&#10;                    &#34;unit&#34;: &#34;Packet&#34;&#10;                  },&#10;                  {&#10;                    &#34;@type&#34;: &#34;PacketAnalysis&#34;,&#10;                    &#34;id&#34;: &#34;Lost Percentage&#34;,&#10;                    &#34;value&#34;: &#34;10&#34;,&#10;                    &#34;unit&#34;: &#34;%&#34;&#10;                  }&#10;                ]&#10;              }&#10;            }&#10;          ]&#10;        }&#10;      ]&#10;    }&#10;  }&#10;}" target="inputJson" />
          <zeebe:input source="=[&#10;  {&#10;    &#34;operation&#34;: &#34;shift&#34;,&#10;    &#34;spec&#34;: {&#10;      // Map top-level fields directly&#10;      &#34;eventId&#34;: &#34;eventId&#34;,&#10;      &#34;eventType&#34;: &#34;eventType&#34;,&#10;      &#34;eventTime&#34;: &#34;eventTime&#34;,&#10;      // Map all fields within eventNote&#10;      &#34;eventNote&#34;: {&#10;        &#34;*&#34;: &#34;eventNote.&#38;&#34;&#10;      },&#10;      // Process the &#39;event&#39; object&#10;      &#34;event&#34;: {&#10;        &#34;notificationType&#34;: &#34;description&#34;,&#10;        // Branch based on the *value* of the &#39;status&#39; field&#10;        &#34;status&#34;: {&#10;          &#34;InProgress&#34;: { // --- Case 1: status is &#34;InProgress&#34; ---&#10;            // Go up 2 levels (from value to &#39;status&#39; key, then to &#39;event&#39; object)&#10;            // and reference sibling/child fields relative to &#39;event&#39;.&#10;            &#34;@(2,id)&#34;: &#34;event.id&#34;, // Map event.id&#10;            &#34;@(2,status)&#34;: &#34;event.state&#34;, // Map event.status to event.state&#10;            &#34;@(2,serviceTest.serviceRef.id)&#34;: &#34;event.relatedService.id&#34;, // Map nested serviceRef id&#10;            &#34;@(2,serviceTest.serviceRef.type)&#34;: &#34;event.relatedService.type&#34;, // Map nested serviceRef type&#10;            &#34;@(2,serviceTest.executionDate.startDateTime)&#34;: &#34;event.startDateTime&#34; // Map nested startDateTime&#10;              // ** Intentionally OMIT endDateTime mapping here **&#10;          },&#10;          &#34;Cancelled&#34;: { // --- Case 1: status is &#34;InProgress&#34; ---&#10;            // Go up 2 levels (from value to &#39;status&#39; key, then to &#39;event&#39; object)&#10;            // and reference sibling/child fields relative to &#39;event&#39;.&#10;            &#34;@(2,id)&#34;: &#34;event.id&#34;, // Map event.id&#10;            &#34;@(2,status)&#34;: &#34;event.state&#34;, // Map event.status to event.state&#10;            &#34;@(2,serviceTest.serviceRef.id)&#34;: &#34;event.relatedService.id&#34;, // Map nested serviceRef id&#10;            &#34;@(2,serviceTest.serviceRef.type)&#34;: &#34;event.relatedService.type&#34;, // Map nested serviceRef type&#10;            &#34;@(2,serviceTest.executionDate.startDateTime)&#34;: &#34;event.startDateTime&#34;,&#10;            &#34;@(2,serviceTest.executionDate.endDateTime)&#34;: &#34;event.endDateTime&#34;&#10;              // Map nested startDateTime&#10;              // ** Intentionally OMIT endDateTime mapping here **&#10;          },&#10;          &#34;*&#34;: { // --- Case 2: status is anything else (wildcard) ---&#10;            // Map the same fields as above...&#10;            &#34;@(2,id)&#34;: &#34;event.id&#34;,&#10;            &#34;@(2,status)&#34;: &#34;event.state&#34;,&#10;            &#34;@(2,serviceTest.serviceRef.id)&#34;: &#34;event.relatedService.id&#34;,&#10;            &#34;@(2,serviceTest.serviceRef.type)&#34;: &#34;event.relatedService.type&#34;,&#10;            &#34;@(2,serviceTest.executionDate.startDateTime)&#34;: &#34;event.startDateTime&#34;,&#10;            // ** Include endDateTime mapping here **&#10;            &#34;@(2,serviceTest.executionDate.endDateTime)&#34;: &#34;event.endDateTime&#34;&#10;          }&#10;        },&#10;        &#34;externalId&#34;: {&#10;          &#34;@&#34;: &#34;event.characteristic[0].value&#34;,&#10;          &#34;#externalId&#34;: &#34;event.characteristic[0].name&#34;,&#10;          &#34;#string&#34;: &#34;event.characteristic[0].valueType&#34;&#10;        },&#10;        &#34;serviceTest&#34;: {&#10;          &#34;serviceTestResults&#34;: {&#10;            &#34;*&#34;: { // Assuming the result you want is always in the first item [0]&#10;              &#34;result&#34;: {&#10;                &#34;@&#34;: &#34;event.characteristic[1].value&#34;,&#10;                &#34;#Test_result&#34;: &#34;event.characteristic[1].name&#34;,&#10;                &#34;#string&#34;: &#34;event.characteristic[1].valueType&#34;&#10;              },&#10;              &#34;type&#34;: &#34;event.name&#34;,&#10;              &#34;testMeasure&#34;: {&#10;                &#34;*&#34;: { // Targeting the first element of testMeasure array&#10;                  &#34;*&#34;: { // Match keys ending in &#34;CosProfile&#34; (high, medium, low)&#10;                    &#34;$&#34;: &#34;event.testMeasure[].metricName&#34;,&#10;                    &#34;result&#34;: {&#10;                      &#34;@&#34;: &#34;event.testMeasure[#3].value[0].value&#34;,&#10;                      &#34;$&#34;: &#34;event.testMeasure[#3].value[0].name&#34;,&#10;                      &#34;#string&#34;: &#34;event.testMeasure[#3].value[0].valueType&#34;&#10;                    },&#10;                    &#34;profile&#34;: {&#10;                      &#34;@&#34;: &#34;event.testMeasure[#3].value[1].value&#34;,&#10;                      &#34;$&#34;: &#34;event.testMeasure[#3].value[1].name&#34;,&#10;                      &#34;#string&#34;: &#34;event.testMeasure[#3].value[1].valueType&#34;&#10;                    }&#10;                    // Get the matched key name ($) and map it to event.testMeasure[].metricName. [] creates an array and appends elements.&#10;                  }&#10;                }&#10;              }&#10;            }&#10;          }&#10;        }&#10;      }&#10;    }&#10;  }&#10;]&#10;" target="joltSpec" />
        </zeebe:ioMapping>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_097m35c</bpmn:incoming>
      <bpmn:outgoing>Flow_0utp6dv</bpmn:outgoing>
    </bpmn:serviceTask>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1qxmu5q">
      <bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1">
        <dc:Bounds x="179" y="99" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0j7rm3n_di" bpmnElement="Event_0j7rm3n">
        <dc:Bounds x="432" y="99" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0mj5mer_di" bpmnElement="Activity_144ynht">
        <dc:Bounds x="270" y="77" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_097m35c_di" bpmnElement="Flow_097m35c">
        <di:waypoint x="215" y="117" />
        <di:waypoint x="270" y="117" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0utp6dv_di" bpmnElement="Flow_0utp6dv">
        <di:waypoint x="370" y="117" />
        <di:waypoint x="432" y="117" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
