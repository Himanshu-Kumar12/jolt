@Schema(description = "For posting the address")

	@Schema(
			description = "For posting the address. Default tenant is 123.",
			defaultValue = "tenantId=123",
			example = "tenantId=123"
	)


@Bean
    public GroupedOpenApi itemApi(){
        return
                GroupedOpenApi.builder()
                        .group("items").pathsToMatch("/api/items/**").build();
    }

    @Bean
    public GroupedOpenApi adminApi(){
     return
             GroupedOpenApi.builder()
             .group("admin").pathsToMatch("/api/admin/**").build();
}







https://www.geeksforgeeks.org/spring-boot-rest-api-documentation-using-swagger/
https://bell-sw.com/blog/documenting-rest-api-with-swagger-in-spring-boot-3/#mcetoc_1heq9ft3o1k
https://github.com/des-felins/spring-tips/tree/main

import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;


@Operation(
    summary = "Get users",
    parameters = {
        @Parameter(name = "X-Correlation-ID", in = ParameterIn.HEADER, required = true, description = "Correlation ID"),
        @Parameter(name = "X-Client-Version", in = ParameterIn.HEADER, required = false, description = "Client version")
    }
)


 @Operation(summary = "Get users",
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "Success",
                headers = {
                    @Header(name = "X-Result-Count", description = "Actual number of items returned in the response body", schema = @io.swagger.v3.oas.annotations.media.Schema(type = "integer")),
                    @Header(name = "X-Total-Count", description = "Total number of items matching criteria", schema = @io.swagger.v3.oas.annotations.media.Schema(type = "integer"))
                }
            )
        }
    )

import io.swagger.v3.oas.annotations.headers.Header;

@Operation(
        summary = "Update an employee",
        description = "Update an existing employee. The response is updated Employee object with id, first name, and last name.",
        responses = {
                @ApiResponse(
                        responseCode = "200",
                        description = "Success",
                        content = @Content(
                                mediaType = "application/json",
                                schema = @Schema(implementation = User.class)
                        ),
                        headers = {
                                @Header(
                                        name = "X-Result-Count",
                                        description = "Actual number of items returned in the response body",
                                        schema = @Schema(type = "integer")
                                ),
                                @Header(
                                        name = "X-Total-Count",
                                        description = "Total number of items matching criteria",
                                        schema = @Schema(type = "integer")
                                )
                        }
                ),
                @ApiResponse(
                        responseCode = "404",
                        description = "Employee not found",
                        content = @Content(
                                schema = @Schema(implementation = User.class)
                        )
                ),
                @ApiResponse(
                        responseCode = "500",
                        description = "Internal Server Error",
                        content = @Content(
                                schema = @Schema(implementation = User.class)
                        )
                )
        }
)
